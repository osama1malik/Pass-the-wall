<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Data.DataView</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Data.DataView.DataViewRowId">
            <summary>
            A structure serving as the identifier of a row of <see cref="T:Microsoft.Data.DataView.IDataView"/>.
            For datasets with millions of records, those IDs need to be unique, therefore the need for such a large structure to hold the values.
            Those Ids are derived from other Ids of the previous components of the pipelines, and dividing the structure in two: high order and low order of bits,
            and reduces the changes of those collisions even further.
            </summary>
            <seealso cref="M:Microsoft.Data.DataView.DataViewRow.GetIdGetter"/>
        </member>
        <member name="F:Microsoft.Data.DataView.DataViewRowId.Low">
            <summary>The low order bits. Corresponds to H1 in the Murmur algorithms.</summary>
        </member>
        <member name="F:Microsoft.Data.DataView.DataViewRowId.High">
            <summary> The high order bits. Corresponds to H2 in the Murmur algorithms.</summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRowId.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.DataView.DataViewRowId"/>
            </summary>
            <param name="low">The low order <langword>ulong</langword>.</param>
            <param name="high">The high order <langword>ulong</langword>.</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRowId.Fork">
            <summary>
            An operation that treats the value as an unmixed Murmur3 128-bit hash state,
            and returns the hash state that would result if we hashed an addition 16 bytes
            that were all zeros, except for the last bit which is one.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRowId.Next">
            <summary>
            An operation that treats the value as an unmixed Murmur3 128-bit hash state,
            and returns the hash state that would result if we hashed an addition 16 bytes
            that were all zeros.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRowId.Combine(Microsoft.Data.DataView.DataViewRowId)">
            <summary>
            An operation that treats the value as an unmixed Murmur3 128-bit hash state,
            and returns the hash state that would result if we took <paramref name="other"/>,
            scrambled it using <see cref="M:Microsoft.Data.DataView.DataViewRowId.Fork"/>, then hashed the result of that.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewSchema">
            <summary>
            This class represents the <see cref="T:Microsoft.Data.DataView.DataViewSchema"/> of an object like, for interstance, an <see cref="T:Microsoft.Data.DataView.IDataView"/> or an <see cref="T:Microsoft.Data.DataView.DataViewRow"/>.
            On the high level, the schema is a collection of <see cref="T:Microsoft.Data.DataView.DataViewSchema.Column"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Count">
            <summary>
            Number of columns in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Item(System.String)">
            <summary>
            Get the column by name. Throws an exception if such column does not exist.
            Note that if multiple columns exist with the same name, the one with the biggest index is returned.
            The other columns are considered 'hidden', and only accessible by their index.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Item(System.Int32)">
            <summary>
            Get the column by index.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.GetColumnOrNull(System.String)">
            <summary>
            Get the column by name, or <c>null</c> if the column is not present.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewSchema.Column">
            <summary>
            This class describes one column in the particular schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Column.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Column.Index">
            <summary>
            The column's index in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Column.IsHidden">
            <summary>
            Whether this column is hidden (accessible only by index).
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Column.Type">
            <summary>
            The type of the column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Column.Annotations">
            <summary>
            The annotations of the column.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewSchema.DetachedColumn">
            <summary>
            This class represents the schema of one column of a data view, without an attachment to a particular <see cref="T:Microsoft.Data.DataView.DataViewSchema"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.DetachedColumn.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.DetachedColumn.Type">
            <summary>
            The type of the column.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.DetachedColumn.Annotations">
            <summary>
            The annotations associated with the column.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.DetachedColumn.#ctor(System.String,Microsoft.Data.DataView.DataViewType,Microsoft.Data.DataView.DataViewSchema.Annotations)">
            <summary>
            Creates an instance of a <see cref="T:Microsoft.Data.DataView.DataViewSchema.DetachedColumn"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.DetachedColumn.#ctor(Microsoft.Data.DataView.DataViewSchema.Column)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Data.DataView.DataViewSchema.DetachedColumn"/> from an existing schema's column.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewSchema.Annotations">
            <summary>
            The annotations of one <see cref="T:Microsoft.Data.DataView.DataViewSchema.Column"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.DataView.DataViewSchema.Annotations._getters">
            <summary>
            Annotation getter delegates. Useful to construct annotations out of other annotations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewSchema.Annotations.Schema">
            <summary>
            The schema of the annotations row. It is different from the schema that the column belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.#ctor(Microsoft.Data.DataView.DataViewSchema,System.Delegate[])">
            <summary>
            Create an annotations row by supplying the schema columns and the getter delegates for all the values.
            </summary>
            <remarks>
            Note: The <paramref name="getters"/> array will be owned by this <see cref="T:Microsoft.Data.DataView.DataViewSchema.Annotations"/> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.GetGetter``1(System.Int32)">
            <summary>
            Get a getter delegate for one value of the annotations row.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.GetValue``1(System.String,``0@)">
            <summary>
            Get the value of an annotation, by annotation kind (aka column name).
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder">
            <summary>
            The class that incrementally builds an <see cref="T:Microsoft.Data.DataView.DataViewSchema.Annotations"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder.Add(Microsoft.Data.DataView.DataViewSchema.Annotations,System.Func{System.String,System.Boolean})">
            <summary>
            Add some columns from <paramref name="annotations"/> into our new annotations, by applying <paramref name="selector"/>
            to all the names.
            </summary>
            <param name="annotations">The annotations row to take values from.</param>
            <param name="selector">The predicate describing which annotation columns to keep.</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder.Add``1(System.String,Microsoft.Data.DataView.DataViewType,Microsoft.Data.DataView.ValueGetter{``0},Microsoft.Data.DataView.DataViewSchema.Annotations)">
            <summary>
            Add one annotation column, strongly-typed version.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The annotation name.</param>
            <param name="type">The annotation type.</param>
            <param name="getter">The getter delegate.</param>
            <param name="annotations">Annotations of the input column. Note that annotations on an annotation column is somewhat rare
            except for certain types (for example, slot names for a vector, key values for something of key type).</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder.Add(System.String,Microsoft.Data.DataView.DataViewType,System.Delegate,Microsoft.Data.DataView.DataViewSchema.Annotations)">
            <summary>
            Add one annotation column, weakly-typed version.
            </summary>
            <param name="name">The annotation name.</param>
            <param name="type">The annotation type.</param>
            <param name="getter">The getter delegate that provides the value. Note that the type of the getter is still checked
            inside this method.</param>
            <param name="annotations">Annotations of the input column. Note that annotations on an annotation column is somewhat rare
            except for certain types (for example, slot names for a vector, key values for something of key type).</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder.AddPrimitiveValue``1(System.String,Microsoft.Data.DataView.PrimitiveDataViewType,``0,Microsoft.Data.DataView.DataViewSchema.Annotations)">
            <summary>
            Add one annotation column for a primitive value type.
            </summary>
            <param name="name">The annotation name.</param>
            <param name="type">The annotation type.</param>
            <param name="value">The value of the annotation.</param>
            <param name="annotations">Annotations of the input column. Note that annotations on an annotation column is somewhat rare
            except for certain types (for example, slot names for a vector, key values for something of key type).</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder.ToAnnotations">
            <summary>
            Returns a <see cref="T:Microsoft.Data.DataView.DataViewSchema.Annotations"/> row that contains the current contents of this <see cref="T:Microsoft.Data.DataView.DataViewSchema.Annotations.Builder"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewSchema.Builder">
            <summary>
            The class that incrementally builds a <see cref="T:Microsoft.Data.DataView.DataViewSchema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Builder.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Data.DataView.DataViewSchema.Builder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Builder.AddColumn(System.String,Microsoft.Data.DataView.DataViewType,Microsoft.Data.DataView.DataViewSchema.Annotations)">
            <summary>
            Add one column to the schema being built.
            </summary>
            <param name="name">The column name.</param>
            <param name="type">The column type.</param>
            <param name="annotations">The column annotations.</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Builder.AddColumns(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column})">
            <summary>
            Add multiple existing columns to the schema being built.
            </summary>
            <param name="source">Columns to add.</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Builder.AddColumns(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.DetachedColumn})">
            <summary>
            Add multiple existing columns to the schema being built.
            </summary>
            <param name="source">Columns to add.</param>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.Builder.ToSchema">
            <summary>
            Returns a <see cref="T:Microsoft.Data.DataView.DataViewSchema"/> that contains the current contents of this <see cref="T:Microsoft.Data.DataView.DataViewSchema.Builder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewSchema.#ctor(Microsoft.Data.DataView.DataViewSchema.Column[])">
            <summary>
            This constructor should only be called by <see cref="T:Microsoft.Data.DataView.DataViewSchema.Builder"/>.
            </summary>
            <param name="columns">The input columns. The constructed instance takes ownership of the array.</param>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewType">
            <summary>
            This is the abstract base class for all types in the <see cref="T:Microsoft.Data.DataView.IDataView"/> type system.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewType.#ctor(System.Type)">
            <summary>
            Constructor for extension types, which must be either <see cref="T:Microsoft.Data.DataView.PrimitiveDataViewType"/> or <see cref="T:Microsoft.Data.DataView.StructuredDataViewType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewType.RawType">
            <summary>
            The raw <see cref="T:System.Type"/> for this <see cref="T:Microsoft.Data.DataView.DataViewType"/>. Note that this is the raw representation type
            and not the complete information content of the <see cref="T:Microsoft.Data.DataView.DataViewType"/>.
            </summary>
            <remarks>
            Code should not assume that a <see cref="P:Microsoft.Data.DataView.DataViewType.RawType"/> uniquely identifiers a <see cref="T:Microsoft.Data.DataView.DataViewType"/>.
            For example, most practical instances of ML.NET's KeyType and <see cref="P:Microsoft.Data.DataView.NumberDataViewType.UInt32"/> will have a
            <see cref="P:Microsoft.Data.DataView.DataViewType.RawType"/> of <see cref="T:System.UInt32"/>, but both are very different in the types of information conveyed in that number.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.DataView.StructuredDataViewType">
            <summary>
            The abstract base class for all non-primitive types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.PrimitiveDataViewType">
            <summary>
            The abstract base class for all primitive types. Values of these types can be freely copied
            without concern for ownership, mutation, or disposing.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.TextDataViewType">
            <summary>
            The standard text type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.NumberDataViewType">
            <summary>
            The standard number types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.RowIdDataViewType">
            <summary>
            The DataViewRowId type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.BooleanDataViewType">
            <summary>
            The standard boolean type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.TimeSpanDataViewType">
            <summary>
            The standard timespan type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.IDataView">
            <summary>
            The input and output of Query Operators (Transforms). This is the fundamental data pipeline
            type, comparable to <see cref="T:System.Collections.Generic.IEnumerable`1"/> for LINQ.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.IDataView.CanShuffle">
            <summary>
            Whether this IDataView supports shuffling of rows, to any degree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.IDataView.GetRowCount">
             <summary>
             Returns the number of rows if known. Returning null means that the row count is unknown but
             it might return a non-null value on a subsequent call. This indicates, that the transform does
             not YET know the number of rows, but may in the future. Its implementation's computation
             complexity should be O(1).
            
             Most implementation will return the same answer every time. Some, like a cache, might
             return null until the cache is fully populated.
             </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.IDataView.GetRowCursor(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Random)">
            <summary>
            Get a row cursor. The active column indices are those for which needCol(col) returns true.
            The schema of the returned cursor will be the same as the schema of the IDataView, but getting
            a getter for inactive columns will throw. The <paramref name="columnsNeeded"/> indicate the columns that are needed
            to iterate over.If set to an empty <see cref="T:System.Collections.IEnumerable"/> no column is requested.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.IDataView.GetRowCursorSet(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Int32,System.Random)">
             <summary>
             This constructs a set of parallel batch cursors. The value <paramref name="n"/> is a recommended limit on
             cardinality. If <paramref name="n"/> is non-positive, this indicates that the caller has no recommendation,
             and the implementation should have some default behavior to cover this case. Note that this is strictly a
             recommendation: it is entirely possible that an implementation can return a different number of cursors.
            
             The cursors should return the same data as returned through
             <see cref="M:Microsoft.Data.DataView.IDataView.GetRowCursor(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Random)"/>, except partitioned: no two cursors should return the
             "same" row as would have been returned through the regular serial cursor, but all rows should be returned by
             exactly one of the cursors returned from this cursor. The cursors can have their values reconciled
             downstream through the use of the <see cref="P:Microsoft.Data.DataView.DataViewRow.Batch"/> property.
            
             The typical usage pattern is that a set of cursors is requested, each of them is then given to a set of
             working threads that consume from them independently while, ultimately, the results are finally collated in
             the end by exploiting the ordering of the <see cref="P:Microsoft.Data.DataView.DataViewRow.Batch"/> property described above. More typical
             scenarios will be content with pulling from the single serial cursor of
             <see cref="M:Microsoft.Data.DataView.IDataView.GetRowCursor(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Random)"/>.
             </summary>
             <param name="columnsNeeded">The active columns needed. If passed an empty <see cref="T:System.Collections.IEnumerable"/> no column is requested.</param>
             <param name="n">The suggested degree of parallelism.</param>
             <param name="rand">An instance of <see cref="T:System.Random"/> to seed randomizing the access.</param>
             <returns></returns>
        </member>
        <member name="P:Microsoft.Data.DataView.IDataView.Schema">
            <summary>
            Gets an instance of Schema.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.ValueGetter`1">
            <summary>
            Delegate type to get a value. This can be used for efficient access to data in a <see cref="T:Microsoft.Data.DataView.DataViewRow"/>
            or <see cref="T:Microsoft.Data.DataView.DataViewRowCursor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewRow">
            <summary>
            A logical row. May be a row of an <see cref="T:Microsoft.Data.DataView.IDataView"/> or a stand-alone row. If/when its contents
            change, its <see cref="P:Microsoft.Data.DataView.DataViewRow.Position"/> value is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewRow.Position">
             <summary>
             This is incremented when the underlying contents changes, giving clients a way to detect change. It should be
             -1 when the object is in a state where values cannot be fetched. In particular, for an <see cref="T:Microsoft.Data.DataView.DataViewRowCursor"/>,
             this will be before <see cref="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext"/> if ever called for the first time, or after the first time
             <see cref="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext"/> is called and returns <see langword="false"/>.
            
             Note that this position is not position within the underlying data, but position of this cursor only. If
             one, for example, opened a set of parallel streaming cursors, or a shuffled cursor, each such cursor's first
             valid entry would always have position 0.
             </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewRow.Batch">
             <summary>
             This provides a means for reconciling multiple rows that have been produced generally from
             <see cref="M:Microsoft.Data.DataView.IDataView.GetRowCursorSet(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Int32,System.Random)"/>. When getting a set, there is a need
             to, while allowing parallel processing to proceed, always have an aim that the original order should be
             reconverable. Note, whether or not a user cares about that original order in ones specific application is
             another story altogether (most callers of this as a practical matter do not, otherwise they would not call
             it), but at least in principle it should be possible to reconstruct the original order one would get from an
             identically configured <see cref="M:Microsoft.Data.DataView.IDataView.GetRowCursor(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Random)"/>. So: for any cursor
             implementation, batch numbers should be non-decreasing. Furthermore, any given batch number should only
             appear in one of the cursors as returned by
             <see cref="M:Microsoft.Data.DataView.IDataView.GetRowCursorSet(System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.DataViewSchema.Column},System.Int32,System.Random)"/>. In this way, order is determined by
             batch number. An operation that reconciles these cursors to produce a consistent single cursoring, could do
             so by drawing from the single cursor, among all cursors in the set, that has the smallest batch number
             available.
            
             Note that there is no suggestion that the batches for a particular entry will be consistent from cursoring
             to cursoring, except for the consistency in resulting in the same overall ordering. The same entry could
             have different batch numbers from one cursoring to another. There is also no requirement that any given
             batch number must appear, at all. It is merely a mechanism for recovering ordering from a possibly arbitrary
             partitioning of the data. It also follows from this, of course, that considering the batch to be a property
             of the data is completely invalid.
             </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRow.GetIdGetter">
             <summary>
             A getter for a 128-bit ID value. It is common for objects to serve multiple <see cref="T:Microsoft.Data.DataView.DataViewRow"/>
             instances to iterate over what is supposed to be the same data, for example, in a <see cref="T:Microsoft.Data.DataView.IDataView"/>
             a cursor set will produce the same data as a serial cursor, just partitioned, and a shuffled cursor will
             produce the same data as a serial cursor or any other shuffled cursor, only shuffled. The ID exists for
             applications that need to reconcile which entry is actually which. Ideally this ID should be unique, but for
             practical reasons, it suffices if collisions are simply extremely improbable.
            
             Note that this ID, while it must be consistent for multiple streams according to the semantics above, is not
             considered part of the data per se. So, to take the example of a data view specifically, a single data view
             must render consistent IDs across all cursorings, but there is no suggestion at all that if the "same" data
             were presented in a different data view (as by, say, being transformed, cached, saved, or whatever), that
             the IDs between the two different data views would have any discernable relationship.</summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRow.IsColumnActive(System.Int32)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRow.GetGetter``1(System.Int32)">
            <summary>
            Returns a value getter delegate to fetch the given column value from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.DataView.DataViewRow.Schema">
            <summary>
            Gets a <see cref="P:Microsoft.Data.DataView.DataViewRow.Schema"/>, which provides name and type information for variables
            (i.e., columns in ML.NET's type system) stored in this row.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRow.Dispose">
            <summary>
            Implementation of dispose. Calls <see cref="M:Microsoft.Data.DataView.DataViewRow.Dispose(System.Boolean)"/> with <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRow.Dispose(System.Boolean)">
            <summary>
            The disposable method for the disposable pattern. This default implementation does nothing.
            </summary>
            <param name="disposing">Whether this was called from <see cref="M:System.IDisposable.Dispose"/>.
            Subclasses that implement <see cref="M:System.Object.Finalize"/> should call this method with
            <see langword="false"/>, but I hasten to add that implementing finalizers should be
            avoided if at all possible.</param>.
        </member>
        <member name="T:Microsoft.Data.DataView.DataViewRowCursor">
            <summary>
            The basic cursor base class to cursor through rows of an <see cref="T:Microsoft.Data.DataView.IDataView"/>. Note that
            this is also an <see cref="T:Microsoft.Data.DataView.DataViewRow"/>. The <see cref="P:Microsoft.Data.DataView.DataViewRow.Position"/> is incremented by <see cref="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext"/>.
            Prior to the first call to <see cref="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext"/>, or after the first call to <see cref="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext"/> that
            returns <see langword="false"/>, <see cref="P:Microsoft.Data.DataView.DataViewRow.Position"/> is <c>-1</c>. Otherwise, in a situation where the
            last call to <see cref="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext"/> returned <see langword="true"/>, <see cref="P:Microsoft.Data.DataView.DataViewRow.Position"/> >= 0.
            </summary>
        </member>
        <member name="M:Microsoft.Data.DataView.DataViewRowCursor.MoveNext">
            <summary>
            Advance to the next row. When the cursor is first created, this method should be called to
            move to the first row. Returns <see langword="false"/> if there are no more rows.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.SchemaDebuggerProxy">
            <summary>
            The debugger proxy for <see cref="T:Microsoft.Data.DataView.DataViewSchema"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.DataView.AnnotationsDebuggerProxy">
            <summary>
            The debugger proxy for <see cref="T:Microsoft.Data.DataView.DataViewSchema.Annotations"/>.
            </summary>
        </member>
    </members>
</doc>
